
On OmniOS, chrony is launched as a privilege-aware process from SMF, as root
but with reduced privileges - only those required to operate.

When it subsequently drops root, after spawning its privileged helper process,
the additional privileges need to be rescinded.

diff -wpruN '--exclude=*.orig' a~/sys_solaris.c a/sys_solaris.c
--- a~/sys_solaris.c	1970-01-01 00:00:00
+++ a/sys_solaris.c	1970-01-01 00:00:00
@@ -33,6 +33,9 @@
 #include "sys_timex.h"
 #include "util.h"
 
+#include "logging.h"
+#include <priv.h>
+
 /* ================================================== */
 
 void
@@ -60,5 +63,23 @@ SYS_Solaris_DropRoot(uid_t uid, gid_t gi
   if (context == SYS_MAIN_PROCESS)
     PRV_StartHelper();
   UTI_DropRoot(uid, gid);
+
+  if (getpflags(PRIV_AWARE) == 1) {
+    priv_set_t *privs = priv_allocset();
+    priv_set_t *basicprivs = priv_allocset();
+
+    if (privs == NULL || basicprivs == NULL)
+      LOG_FATAL("Failed to allocate priv sets");
+    if (getppriv(PRIV_EFFECTIVE, privs) != 0)
+      LOG_FATAL("Failed to retrieve current privileges");
+    priv_basicset(basicprivs);
+    priv_intersect(basicprivs, privs);
+    if (setppriv(PRIV_SET, PRIV_PERMITTED, privs) != 0)
+      LOG_FATAL("Failed to reduce permitted privileges");
+    if (setppriv(PRIV_SET, PRIV_INHERITABLE, privs) != 0)
+      LOG_FATAL("Failed to reduce inheritable privileges");
+    priv_freeset(privs);
+    priv_freeset(basicprivs);
+  }
 }
 #endif
